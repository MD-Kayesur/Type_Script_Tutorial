// 4. inheritance
// ‡¶ï‡¶æ‡¶ú:
// Inheritance ‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶è‡¶ï ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶ø ‡¶ï‡ßç‡¶≤‡¶æ‡¶∏‡ßá‡¶∞ property ‡¶è‡¶¨‡¶Ç method ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡ßá‡•§
// ‡¶è‡¶ü‡¶ø reuse, extendability ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶° ‡¶õ‡ßã‡¶ü ‡¶∞‡¶æ‡¶ñ‡¶§‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡ßá‡•§

 
class Animal {
    name: string;
  
    constructor(name: string) {
      this.name = name;
    }
  
    makeSound(): void {
      console.log("Generic animal sound");
    }
  }
  
  // Dog class inherits from Animal
  class Dog extends Animal {
    breed: string;
  
    constructor(name: string, breed: string) {
      super(name); // call parent class constructor
      this.breed = breed;
    }
  
    makeSound(): void {
      console.log("Woof! Woof!");
    }
  }
  
  const myDog = new Dog("Tommy", "Labrador");
  myDog.makeSound(); // Woof! Woof!


//   Example: Person ‚Üí Student
  // Parent class
class Person {
    name: string;
    age: number;
  
    constructor(name: string, age: number) {
      this.name = name;
      this.age = age;
    }
  
    display(): void {
      console.log(`Name: ${this.name}, Age: ${this.age}`);
    }
  }
  
  // Child class (inherits from Person)
  class Student extends Person {
    roll: number;
  
    constructor(name: string, age: number, roll: number) {
      super(name, age); // parent constructor call
      this.roll = roll;
    }
  
    showDetails(): void {
      console.log(`Student Name: ${this.name}, Age: ${this.age}, Roll: ${this.roll}`);
    }
  }
  
  // üî∞ Object ‡¶§‡ßà‡¶∞‡¶ø
  const student1 = new Student("Rahim", 20, 101);
  
  // ‚úÖ Access parent and child methods
  student1.display();     // From Person
  student1.showDetails(); // From Student
  



  
//   ‡¶Ü‡¶∞‡¶ì Example: Employee ‚Üí Manager

  class Employee {
    name: string;
    salary: number;
  
    constructor(name: string, salary: number) {
      this.name = name;
      this.salary = salary;
    }
  
    work(): void {
      console.log(`${this.name} is working`);
    }
  }
  
  class Manager extends Employee {
    department: string;
  
    constructor(name: string, salary: number, department: string) {
      super(name, salary);
      this.department = department;
    }
  
    manage(): void {
      console.log(`${this.name} manages the ${this.department} department`);
    }
  }
  
  const manager = new Manager("Karim", 50000, "IT");
  manager.work();   // From Employee
  manager.manage(); // From Manager
  